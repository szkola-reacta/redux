{"ast":null,"code":"var _jsxFileName = \"/Users/video/Workspace/SzkolaReacta/redux/src/users/containers/Users.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport UsersList from \"../components/UsersList\";\nimport { fetchRequested as _fetchRequested } from \"../redux\";\n\nclass Users extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.fetchData = () => {\n      this.props.fetchRequested();\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          users = _this$props.users,\n          isLoading = _this$props.isLoading;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }\n    }, \"Users\"), isLoading && /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 23\n      }\n    }, \"Loading...\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.fetchData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }, \"Fetch Users\"), /*#__PURE__*/React.createElement(UsersList, {\n      users: users,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  users: state.users.users,\n  isLoading: state.users.isLoading,\n  isError: state.users.isError\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchRequested: () => dispatch(_fetchRequested())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Users);","map":{"version":3,"sources":["/Users/video/Workspace/SzkolaReacta/redux/src/users/containers/Users.js"],"names":["React","Component","connect","UsersList","fetchRequested","Users","fetchData","props","render","users","isLoading","mapStateToProps","state","isError","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,cAAc,IAAdA,eAAT,QAA+B,UAA/B;;AAEA,MAAMC,KAAN,SAAoBJ,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAC5BK,SAD4B,GAChB,MAAM;AAChB,WAAKC,KAAL,CAAWH,cAAX;AACD,KAH2B;AAAA;;AAI5BI,EAAAA,MAAM,GAAG;AAAA,wBACsB,KAAKD,KAD3B;AAAA,UACCE,KADD,eACCA,KADD;AAAA,UACQC,SADR,eACQA,SADR;AAEP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEGA,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFhB,eAGE;AAAQ,MAAA,OAAO,EAAE,KAAKJ,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHF,eAIE,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAEG,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF;AAQD;;AAd2B;;AAiB9B,MAAME,eAAe,GAAGC,KAAK,KAAK;AAChCH,EAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYA,KADa;AAEhCC,EAAAA,SAAS,EAAEE,KAAK,CAACH,KAAN,CAAYC,SAFS;AAGhCG,EAAAA,OAAO,EAAED,KAAK,CAACH,KAAN,CAAYI;AAHW,CAAL,CAA7B;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCX,EAAAA,cAAc,EAAE,MAAMW,QAAQ,CAACX,eAAc,EAAf;AADQ,CAAL,CAAnC;;AAIA,eAAeF,OAAO,CACpBS,eADoB,EAEpBG,kBAFoB,CAAP,CAGbT,KAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport UsersList from \"../components/UsersList\";\nimport { fetchRequested } from \"../redux\";\n\nclass Users extends Component {\n  fetchData = () => {\n    this.props.fetchRequested();\n  };\n  render() {\n    const { users, isLoading } = this.props;\n    return (\n      <div className=\"container\">\n        <h2>Users</h2>\n        {isLoading && <p>Loading...</p>}\n        <button onClick={this.fetchData}>Fetch Users</button>\n        <UsersList users={users} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  users: state.users.users,\n  isLoading: state.users.isLoading,\n  isError: state.users.isError\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchRequested: () => dispatch(fetchRequested())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Users);\n\n"]},"metadata":{},"sourceType":"module"}