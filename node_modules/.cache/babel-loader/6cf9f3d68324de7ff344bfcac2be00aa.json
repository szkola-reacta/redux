{"ast":null,"code":"import _objectSpread from \"/Users/video/Workspace/SzkolaReacta/redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n// Action:\n// {\n//   type: 'COUNTER_ADD',\n//   payload: 123\n// }\nconst COUNTER_INC = \"counter/COUNTER_INC\";\nconst COUNTER_DEC = \"counter/COUNTER_DEC\";\nconst COUNTER_RESET = \"counter/COUNTER_RESET\";\nexport function inc() {\n  return {\n    type: COUNTER_INC\n  };\n}\nexport function dec() {\n  return {\n    type: COUNTER_DEC\n  };\n}\nexport const reset = () => ({\n  type: COUNTER_RESET\n});\nconst INITIAL_STATE = {\n  count: 0\n};\nexport default function reducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case COUNTER_INC:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + 1\n      });\n\n    case COUNTER_DEC:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count - 1\n      });\n\n    case COUNTER_RESET:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: 0\n      });\n\n    default:\n      return state;\n  } // if (action.type === COUNTER_INC) {\n  //   return {...state, counter: state.counter + 1 }\n  //   // return Object.assign({}, { counter: state.counter + 1 });\n  // }\n  // return state;\n\n}","map":{"version":3,"sources":["/Users/video/Workspace/SzkolaReacta/redux/src/counter/redux.js"],"names":["COUNTER_INC","COUNTER_DEC","COUNTER_RESET","inc","type","dec","reset","INITIAL_STATE","count","reducer","state","action"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AAEA,MAAMA,WAAW,GAAG,qBAApB;AACA,MAAMC,WAAW,GAAG,qBAApB;AACA,MAAMC,aAAa,GAAG,uBAAtB;AAEA,OAAO,SAASC,GAAT,GAAe;AACpB,SAAO;AACLC,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD;AAED,OAAO,SAASK,GAAT,GAAe;AACpB,SAAO;AACLD,IAAAA,IAAI,EAAEH;AADD,GAAP;AAGD;AAED,OAAO,MAAMK,KAAK,GAAG,OAAO;AAAEF,EAAAA,IAAI,EAAEF;AAAR,CAAP,CAAd;AAEP,MAAMK,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE;AADa,CAAtB;AAIA,eAAe,SAASC,OAAT,CAAiBC,KAAK,GAAGH,aAAzB,EAAwCI,MAAxC,EAAgD;AAC7D,UAAQA,MAAM,CAACP,IAAf;AACE,SAAKJ,WAAL;AACE,6CAAYU,KAAZ;AAAmBF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAxC;;AACF,SAAKP,WAAL;AACE,6CAAYS,KAAZ;AAAmBF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAc;AAAxC;;AACF,SAAKN,aAAL;AACE,6CAAYQ,KAAZ;AAAmBF,QAAAA,KAAK,EAAE;AAA1B;;AACF;AACE,aAAOE,KAAP;AARJ,GAD6D,CAW7D;AACA;AACA;AACA;AACA;;AACD","sourcesContent":["// Action:\n// {\n//   type: 'COUNTER_ADD',\n//   payload: 123\n// }\n\nconst COUNTER_INC = \"counter/COUNTER_INC\";\nconst COUNTER_DEC = \"counter/COUNTER_DEC\";\nconst COUNTER_RESET = \"counter/COUNTER_RESET\";\n\nexport function inc() {\n  return {\n    type: COUNTER_INC\n  };\n}\n\nexport function dec() {\n  return {\n    type: COUNTER_DEC\n  };\n}\n\nexport const reset = () => ({ type: COUNTER_RESET });\n\nconst INITIAL_STATE = {\n  count: 0\n};\n\nexport default function reducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case COUNTER_INC:\n      return { ...state, count: state.count + 1 };\n    case COUNTER_DEC:\n      return { ...state, count: state.count - 1 };\n    case COUNTER_RESET:\n      return { ...state, count: 0 };\n    default:\n      return state;\n  }\n  // if (action.type === COUNTER_INC) {\n  //   return {...state, counter: state.counter + 1 }\n  //   // return Object.assign({}, { counter: state.counter + 1 });\n  // }\n  // return state;\n}\n"]},"metadata":{},"sourceType":"module"}