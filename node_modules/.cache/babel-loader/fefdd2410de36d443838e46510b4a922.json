{"ast":null,"code":"import _objectSpread from \"/Users/video/Workspace/SzkolaReacta/redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nconst FETCH_POSTS_REQUESTED = \"posts/FETCH_POSTS_REQUESTED\";\nconst FETCH_POSTS_SUCCEDED = \"posts/FETCH_POSTS_SUCCEDED\";\nconst FETCH_POSTS_FAILED = \"posts/FETCH_POSTS_FAILED\";\nconst INITIAL_STATE = {\n  posts: [],\n  isLoading: false,\n  isError: false\n};\n\nconst fetchRequested = () => ({\n  type: FETCH_POSTS_REQUESTED\n});\n\nconst fetchFailed = () => ({\n  type: FETCH_POSTS_FAILED\n});\n\nconst fetchSucceded = data => ({\n  type: FETCH_POSTS_SUCCEDED,\n  payload: data\n});\n\nexport const fetchPosts = () => {\n  return function (dispatch) {\n    dispatch(fetchRequested());\n    fetch(\"https://jsonplaceholder.typicode.com/posts\").then(response => response.json()).then(data => {\n      dispatch(fetchSucceded(data.slice(0, 5)));\n    }).catch(error => {\n      dispatch(fetchFailed());\n    });\n  };\n};\nexport default ((state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FETCH_POSTS_REQUESTED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: true,\n        isError: false\n      });\n\n    case FETCH_POSTS_SUCCEDED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: false,\n        isError: false,\n        posts: action.payload\n      });\n\n    case FETCH_POSTS_FAILED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoading: false,\n        isError: true\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/video/Workspace/SzkolaReacta/redux/src/posts/redux.js"],"names":["FETCH_POSTS_REQUESTED","FETCH_POSTS_SUCCEDED","FETCH_POSTS_FAILED","INITIAL_STATE","posts","isLoading","isError","fetchRequested","type","fetchFailed","fetchSucceded","data","payload","fetchPosts","dispatch","fetch","then","response","json","slice","catch","error","state","action"],"mappings":";AAAA,MAAMA,qBAAqB,GAAG,6BAA9B;AACA,MAAMC,oBAAoB,GAAG,4BAA7B;AACA,MAAMC,kBAAkB,GAAG,0BAA3B;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,KAAK,EAAE,EADa;AAEpBC,EAAAA,SAAS,EAAE,KAFS;AAGpBC,EAAAA,OAAO,EAAE;AAHW,CAAtB;;AAMA,MAAMC,cAAc,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAER;AAAR,CAAP,CAAvB;;AACA,MAAMS,WAAW,GAAG,OAAO;AAAED,EAAAA,IAAI,EAAEN;AAAR,CAAP,CAApB;;AACA,MAAMQ,aAAa,GAAGC,IAAI,KAAK;AAAEH,EAAAA,IAAI,EAAEP,oBAAR;AAA8BW,EAAAA,OAAO,EAAED;AAAvC,CAAL,CAA1B;;AAEA,OAAO,MAAME,UAAU,GAAG,MAAM;AAC9B,SAAO,UAASC,QAAT,EAAmB;AACxBA,IAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;AACAQ,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQL,IAAI,IAAI;AACZG,MAAAA,QAAQ,CAACJ,aAAa,CAACC,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAc,CAAd,CAAD,CAAd,CAAR;AACD,KAJH,EAKGC,KALH,CAKSC,KAAK,IAAI;AACdP,MAAAA,QAAQ,CAACL,WAAW,EAAZ,CAAR;AACD,KAPH;AAQD,GAVD;AAWD,CAZM;AAcP,gBAAe,CAACa,KAAK,GAAGnB,aAAT,EAAwBoB,MAAxB,KAAmC;AAChD,UAAQA,MAAM,CAACf,IAAf;AACE,SAAKR,qBAAL;AACE,6CACKsB,KADL;AAEEjB,QAAAA,SAAS,EAAE,IAFb;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKL,oBAAL;AACE,6CACKqB,KADL;AAEEjB,QAAAA,SAAS,EAAE,KAFb;AAGEC,QAAAA,OAAO,EAAE,KAHX;AAIEF,QAAAA,KAAK,EAAEmB,MAAM,CAACX;AAJhB;;AAMF,SAAKV,kBAAL;AACE,6CACKoB,KADL;AAEEjB,QAAAA,SAAS,EAAE,KAFb;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF;AACE,aAAOgB,KAAP;AArBJ;AAuBD,CAxBD","sourcesContent":["const FETCH_POSTS_REQUESTED = \"posts/FETCH_POSTS_REQUESTED\";\nconst FETCH_POSTS_SUCCEDED = \"posts/FETCH_POSTS_SUCCEDED\";\nconst FETCH_POSTS_FAILED = \"posts/FETCH_POSTS_FAILED\";\n\nconst INITIAL_STATE = {\n  posts: [],\n  isLoading: false,\n  isError: false\n};\n\nconst fetchRequested = () => ({ type: FETCH_POSTS_REQUESTED });\nconst fetchFailed = () => ({ type: FETCH_POSTS_FAILED });\nconst fetchSucceded = data => ({ type: FETCH_POSTS_SUCCEDED, payload: data });\n\nexport const fetchPosts = () => {\n  return function(dispatch) {\n    dispatch(fetchRequested());\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\n      .then(response => response.json())\n      .then(data => {\n        dispatch(fetchSucceded(data.slice(0, 5)));\n      })\n      .catch(error => {\n        dispatch(fetchFailed());\n      });\n  };\n};\n\nexport default (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case FETCH_POSTS_REQUESTED:\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    case FETCH_POSTS_SUCCEDED:\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        posts: action.payload\n      };\n    case FETCH_POSTS_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}